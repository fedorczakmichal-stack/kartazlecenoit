// --- ENHANCED MEDICAL CARD SYSTEM v2.2 ---

// Bazy danych i konfiguracja bez zmian...
const continuousDrugsData = { 'NORADRENALINA': { concentration: '8mg/50ml', dose: '0.1-1.0 μg/kg/min' }, 'ADRENALINA': { concentration: '1mg/50ml', dose: '0.01-0.1 μg/kg/min' }, 'DOPAMINA': { concentration: '200mg/50ml', dose: '2-20 μg/kg/min' }, 'DOBUTAMINA': { concentration: '250mg/50ml', dose: '2-20 μg/kg/min' }, 'WAZOPRESYNA': { concentration: '20j/20ml', dose: '0.01-0.04 j/min' }, 'MILRINON': { concentration: '10mg/50ml', dose: '0.375-0.75 μg/kg/min' }, 'PROPOFOL 1%': { concentration: '10mg/ml', dose: '1-4 mg/kg/h' }, 'PROPOFOL 2%': { concentration: '20mg/ml', dose: '1-4 mg/kg/h' }, 'MIDAZOLAM': { concentration: '50mg/50ml', dose: '1-15 mg/h' }, 'DEKSMEDETOMIDYNA': { concentration: '200μg/50ml', dose: '0.2-1.4 μg/kg/h' }, 'FENTANYL': { concentration: '500μg/50ml', dose: '25-100 μg/h' }, 'REMIFENTANYL': { concentration: '2mg/40ml', dose: '0.05-0.2 μg/kg/min' }, 'MORFINA': { concentration: '20mg/20ml', dose: '1-5 mg/h' }, 'LIGNOCAINA 1%': { concentration: '500mg/50ml', dose: '1-2 mg/min' }, 'OKSYKODON': { concentration: '20mg/20ml', dose: '1-2 mg/h' }, 'KETAMINA': { concentration: '250mg/50ml', dose: '0.5-2 mg/kg/h' }, 'ROKURONIOM': { concentration: '50mg/5ml', dose: '0.3-0.6 mg/kg/h' }, 'CISATRAKURIUM': { concentration: '20mg/10ml', dose: '0.06-0.18 mg/kg/h' }, 'INSULINA': { concentration: '50j/50ml', dose: '0.5-10 j/h' }, 'HEPARYNA': { concentration: '25000j/50ml', dose: '500-2000 j/h' }, 'FUROSEMID': { concentration: '100mg/50ml', dose: '5-20 mg/h' }, 'AMIODARON': { concentration: '300mg/50ml 5% Glc', dose: '20-50 mg/h' }, 'NITROGLICERYNA': { concentration: '25mg/50ml', dose: '5-200 μg/min' }, 'PIPERACYLINA/TAZOBAKTAM': { concentration: '18g/100ml', dose: 'wlew 24h', fixedRate: '4.2' }, 'PANTOPRAZOL': { concentration: '80mg/100ml', dose: '4.2 ml/h', fixedRate: '4.2' }, 'METOPROLOL': { concentration: '10mg/50ml', dose: '1-5 mg/h' }, 'SALBUTAMOL': { concentration: '5mg/50ml', dose: '3-20 μg/min' }, 'DIAZEPAM': { concentration: '50mg/50ml', dose: '2-10 mg/h' } };
const periodicDrugsData = { 'AMOKSYCYLINA/KWAS KLAWULANOWY': { dose: '1.2g', route: 'i.v.', frequency: 'co 8h' }, 'AMIKACYNA': { dose: '15-20mg/kg', route: 'wlew i.v. 1h', frequency: 'co 24h' }, 'CEFTAZYDYM': { dose: '2g', route: 'i.v.', frequency: 'co 8h' }, 'CEFUROKSYM': { dose: '1.5g', route: 'i.v.', frequency: 'co 8h' }, 'CIPROFLOKSACYNA': { dose: '400mg', route: 'wlew i.v. 1h', frequency: 'co 12h' }, 'IMIPENEM/CYLASTATYNA': { dose: '0.5g', route: 'wlew i.v. 30min', frequency: 'co 6-8h' }, 'KOLISTYNA': { dose: 'nasyc. 9mln j, potem 4.5mln j', route: 'i.v.', frequency: 'co 12h' }, 'LEWOFLOKSACYNA': { dose: '500mg', route: 'wlew i.v. 1h', frequency: 'co 24h' }, 'LINEZOLID': { dose: '600mg', route: 'wlew i.v. 2h', frequency: 'co 12h' }, 'MEROPENEM': { dose: '1g', route: 'wlew i.v. 30min', frequency: 'co 8h' }, 'METRONIDAZOL': { dose: '500mg', route: 'i.v.', frequency: 'co 8h' }, 'PIPERACYLina/tazobaktam': { dose: '4.5g', route: 'wlew i.v. 30min', frequency: 'co 8h' }, 'SULBAKTAM/CEFOPERAZON': { dose: '2g', route: 'i.v.', frequency: 'co 12h' }, 'TEIKOPLANINA': { dose: 'nasyc. 400mg x3 co 12h, potem 400mg', route: 'i.v.', frequency: 'co 24h' }, 'TYGECYKLINA': { dose: 'nasyc. 100mg, potem 50mg', route: 'wlew i.v. 1h', frequency: 'co 12h' }, 'WANKOMYCYNA': { dose: '1g', route: 'wlew i.v. 1h', frequency: 'co 12h' }, 'FLUKONAZOL': { dose: '400mg', route: 'i.v.', frequency: 'co 24h' }, 'WORYKONAZOL': { dose: 'nasyc. 6mg/kg x2, potem 4mg/kg', route: 'wlew i.v. 2h', frequency: 'co 12h' }, 'GENTAMYCYNA': { dose: '3-5mg/kg', route: 'wlew i.v. 1h', frequency: 'co 24h' }, 'KETOKONAZOL': { dose: '200mg', route: 'p.o. (sonda)', frequency: 'co 12h' }, 'FUROSEMID': { dose: '20-40mg', route: 'i.v.', frequency: 'wg zlecenia' }, 'MANNITOL 15%': { dose: '100ml', route: 'wlew i.v. 30min', frequency: 'wg zlecenia' }, 'SPIRONOLAKTON': { dose: '25-100mg', route: 'i.v.', frequency: 'co 24h' }, 'ENOKSAPARYNA': { dose: '40mg', route: 's.c.', frequency: 'co 24h' }, 'NADROPARYNA': { dose: '0.4-0.6ml', route: 's.c.', frequency: 'co 24h' }, 'KWAS TRANEXAMOWY': { dose: '1g', route: 'i.v.', frequency: 'co 8h' }, 'ETAMSYLAT': { dose: '250-500mg', route: 'i.v.', frequency: 'co 6h' }, 'DEKSAMETAZON': { dose: '4-8mg', route: 'i.v.', frequency: 'co 6-12h' }, 'HYDROKORTYZON': { dose: '50-100mg', route: 'i.v.', frequency: 'co 6-8h' }, 'METYLOPREDNIZOLON': { dose: '125mg', route: 'i.v.', frequency: 'wg zlecenia' }, 'METAMIZOL': { dose: '1g', route: 'i.v.', frequency: 'co 6-8h' }, 'PARACETAMOL': { dose: '1g', route: 'i.v.', frequency: 'co 6h' }, 'METOKLOPRAMID': { dose: '10mg', route: 'i.v.', frequency: 'co 8h' }, 'PANTOPRAZOL': { dose: '40mg', route: 'i.v.', frequency: 'co 24h' }, 'OMEPRAZOL': { dose: '40mg', route: 'i.v.', frequency: 'co 24h' }, 'HALOPERIDOL': { dose: '2.5-5mg', route: 'i.v./i.m.', frequency: 'wg zlecenia' }, 'CHLORPROMAZYNA': { dose: '25-50mg', route: 'i.m.', frequency: 'doraźnie' }, 'DESMOPRESYNA': { dose: '1-4μg', route: 'i.v./s.c.', frequency: 'co 12-24h' }, 'WAPŃ': { dose: '10-20ml 10%', route: 'i.v. wlew', frequency: 'co 6h' }, 'WINPOCETYNA': { dose: '10mg', route: 'i.v. wlew', frequency: 'co 12h' }, 'CEREBROLIZYNA': { dose: '10-30ml', route: 'i.v. wlew', frequency: 'co 24h' }, 'PIRACETAM': { dose: '4.8g', route: 'i.v.', frequency: 'co 12h' }, 'ORNITYNA': { dose: '20g', route: 'i.v. wlew 24h', frequency: 'co 24h' }, 'CYKLOFOSFAMID': { dose: 'wg zlecenia', route: 'i.v. wlew', frequency: 'wg schematu' }, 'ACETYLOCYSTEINA': { dose: '300mg (3ml)', route: 'nebulizacja', frequency: 'co 8h' }, 'ADRENALINA (NEBULIZACJA)': { dose: '0.5mg', route: 'nebulizacja', frequency: 'wg zlecenia' }, 'AMBROKSOL': { dose: '15mg (2ml)', route: 'nebulizacja', frequency: 'co 12h' }, 'BERODUAL': { dose: '1-2ml (20-40 kropli)', route: 'nebulizacja', frequency: 'co 4-6h' }, 'IPRATROPIUM': { dose: '0.5mg (2ml)', route: 'nebulizacja', frequency: 'co 6-8h' }, 'KOLISTYNA (NEBULIZACJA)': { dose: '1-2mln j', route: 'nebulizacja', frequency: 'co 8-12h' }, 'SALBUTAMOL (NEBULIZACJA)': { dose: '2.5mg', route: 'nebulizacja', frequency: 'co 4-6h' }, 'SALBUTAMOL (WZIEW)': { dose: '2 wdechy', route: 'do rurki', frequency: 'co 4h' }, 'NABIC (1.4% NAHCO3)': { dose: '5ml', route: 'nebulizacja', frequency: 'co 8h' }, 'LEWOFLOKSACYNA (KROPLE)': { dose: '1 kropla', route: 'do worka spoj.', frequency: 'co 2h → co 6h' }, 'TOBRAMYCYNA/DEKSAMETAZON (KROPLE)': { dose: '1 kropla', route: 'do worka spoj.', frequency: 'co 6h' }, 'OFLOKSACYNA (KROPLE)': { dose: '1 kropla', route: 'do worka spoj.', frequency: 'co 6h' }, 'POLPRAZOL': { dose: '20mg', route: 'p.o. (sonda)', frequency: 'co 12h' }, 'LACTULOSUM': { dose: '15ml', route: 'p.o. (sonda)', frequency: 'co 8h' }, 'KALIUM POLISTYRENOSULFONIAN': { dose: '15g (1 miarka)', route: 'p.o. (sonda)', frequency: 'co 6-8h' }, 'EUTHYROX': { dose: 'wg zlecenia', route: 'p.o. na czczo', frequency: 'co 24h' } };
const fluidsData = { 'NaCl 0.9%': { volume: '500ml', rate: '50' }, 'Plasmalyte': { volume: '500ml', rate: '50' }, 'Optilyte': { volume: '500ml', rate: '50' }, 'Płyn Ringera': { volume: '500ml', rate: '50' }, 'Glukoza 5%': { volume: '500ml', rate: '40' }, 'Glukoza 10%': { volume: '500ml', rate: '30' }, 'Gelofusine': { volume: '500ml', rate: '100' }, 'Albuminy 20%': { volume: '100ml', rate: '50' }, 'Albuminy 5%': { volume: '250ml', rate: '100' }, 'Mannitol 15%': { volume: '250ml', rate: '125' }, 'NaHCO3 8.4%': { volume: '100ml', rate: '50' } };
const glucoseKcalData = { "Glukoza 5%": 0.17, "Glukoza 10%": 0.34 };
const nutritionFlowRates = { "Nutricomp Standard 500ml (1 kcal/ml)": 50, "Nutricomp Standard 1000ml (1 kcal/ml)": 80, "Nutricomp intensiv 500ml (1.5 kcal/ml)": 40, "Nutricomp intensiv 1000ml (1.5 kcal/ml)": 60, "Nutricomp Standard Fibre 500ml (1 kcal/ml)": 50, "Nutrison 500ml (1 kcal/ml)": 50, "Nutrison 1000ml (1 kcal/ml)": 80, "Nutrison 1500ml (1 kcal/ml)": 100, "Nutrison Advanced Peptisorb 500ml (1 kcal/ml)": 50, "Nutrison Advanced Peptisorb 1000ml (1 kcal/ml)": 80, "Nutrison Multi Fibre 500ml (1 kcal/ml)": 50, "Nutrison Multi Fibre 1000ml (1 kcal/ml)": 80, "OMEGAFLEX PLUS 1250ml (1.3 kcal/ml)": 50, "OMEGAFLEX PLUS 1875ml (1.3 kcal/ml)": 75, "OMEGAFLEX SPECIAL 625ml (1.3 kcal/ml)": 25, "OMEGAFLEX SPECIAL 1250ml (1.3 kcal/ml)": 50, "OMEGAFLEX SPECIAL 1875ml (1.3 kcal/ml)": 75, "Nutriflex Peri 1000ml (1.2 kcal/ml)": 80, "Nutriflex Plus 1000ml (1.2 kcal/ml)": 80, "SmofKabiven 986ml (1.1 kcal/ml)": 40, "SmofKabiven 1477ml (1.1 kcal/ml)": 60, "SmofKabiven Extra NITROGEN 1012ml (1.2 kcal/ml)": 42, "SmofKabiven Extra NITROGEN 1518ml (1.2 kcal/ml)": 63, "SmofKabiven EF 986ml (1.1 kcal/ml)": 40, "SmofKabiven EF 1477ml (1.1 kcal/ml)": 60, "SmofKabiven LOW OSMO 850ml (1.0 kcal/ml)": 35, "SmofKabiven LOW OSMO 1400ml (1.0 kcal/ml)": 58, "SmofKabiven LOW OSMO 1950ml (1.0 kcal/ml)": 81, "Aminomix 1 Novum 1000ml (0.8 kcal/ml)": 80, "Aminomix 1 Novum 1500ml (0.8 kcal/ml)": 100 };
const nutritionData = { "Nutricomp Standard 500ml (1 kcal/ml)": { kcal: 500, volume: 500 }, "Nutricomp Standard 1000ml (1 kcal/ml)": { kcal: 1000, volume: 1000 }, "Nutricomp intensiv 500ml (1.5 kcal/ml)": { kcal: 750, volume: 500 }, "Nutricomp intensiv 1000ml (1.5 kcal/ml)": { kcal: 1500, volume: 1000 }, "Nutricomp Standard Fibre 500ml (1 kcal/ml)": { kcal: 500, volume: 500 }, "Nutrison 500ml (1 kcal/ml)": { kcal: 500, volume: 500 }, "Nutrison 1000ml (1 kcal/ml)": { kcal: 1000, volume: 1000 }, "Nutrison 1500ml (1 kcal/ml)": { kcal: 1500, volume: 1500 }, "Nutrison Advanced Peptisorb 500ml (1 kcal/ml)": { kcal: 500, volume: 500 }, "Nutrison Advanced Peptisorb 1000ml (1 kcal/ml)": { kcal: 1000, volume: 1000 }, "Nutrison Multi Fibre 500ml (1 kcal/ml)": { kcal: 500, volume: 500 }, "Nutrison Multi Fibre 1000ml (1 kcal/ml)": { kcal: 1000, volume: 1000 }, "OMEGAFLEX PLUS 1250ml (1.3 kcal/ml)": { kcal: 1625, volume: 1250 }, "OMEGAFLEX PLUS 1875ml (1.3 kcal/ml)": { kcal: 2438, volume: 1875 }, "OMEGAFLEX SPECIAL 625ml (1.3 kcal/ml)": { kcal: 813, volume: 625 }, "OMEGAFLEX SPECIAL 1250ml (1.3 kcal/ml)": { kcal: 1625, volume: 1250 }, "OMEGAFLEX SPECIAL 1875ml (1.3 kcal/ml)": { kcal: 2438, volume: 1875 }, "Nutriflex Peri 1000ml (1.2 kcal/ml)": { kcal: 1200, volume: 1000 }, "Nutriflex Plus 1000ml (1.2 kcal/ml)": { kcal: 1200, volume: 1000 }, "SmofKabiven 986ml (1.1 kcal/ml)": { kcal: 1085, volume: 986 }, "SmofKabiven 1477ml (1.1 kcal/ml)": { kcal: 1625, volume: 1477 }, "SmofKabiven Extra NITROGEN 1012ml (1.2 kcal/ml)": { kcal: 1214, volume: 1012 }, "SmofKabiven Extra NITROGEN 1518ml (1.2 kcal/ml)": { kcal: 1822, volume: 1518 }, "SmofKabiven EF 986ml (1.1 kcal/ml)": { kcal: 1085, volume: 986 }, "SmofKabiven EF 1477ml (1.1 kcal/ml)": { kcal: 1625, volume: 1477 }, "SmofKabiven LOW OSMO 850ml (1.0 kcal/ml)": { kcal: 850, volume: 850 }, "SmofKabiven LOW OSMO 1400ml (1.0 kcal/ml)": { kcal: 1400, volume: 1400 }, "SmofKabiven LOW OSMO 1950ml (1.0 kcal/ml)": { kcal: 1950, volume: 1950 }, "Aminomix 1 Novum 1000ml (0.8 kcal/ml)": { kcal: 800, volume: 1000 }, "Aminomix 1 Novum 1500ml (0.8 kcal/ml)": { kcal: 1200, volume: 1500 } };
const gfrDoseAdjustments = { 'WANKOMYCYNA': [ { gfrMax: 10, dose: '1g nasyc., potem 0.5g', frequency: 'co 72h + TDM' }, { gfrMax: 50, dose: '1g', frequency: 'co 48h + TDM' } ], 'MEROPENEM': [ { gfrMax: 10, dose: '0.5g', frequency: 'co 24h' }, { gfrMax: 25, dose: '0.5g', frequency: 'co 12h' }, { gfrMax: 50, dose: '1g', frequency: 'co 12h' } ], 'PIPERACYLINA/TAZOBAKTAM': [ { gfrMax: 20, dose: '2.25g', frequency: 'co 8h' }, { gfrMax: 40, dose: '3.375g', frequency: 'co 8h' } ], 'AMIKACYNA': [ { gfrMax: 10, dose: '7.5mg/kg', frequency: 'co 72h + TDM' }, { gfrMax: 50, dose: '15mg/kg', frequency: 'co 36h + TDM' } ], 'GENTAMYCYNA': [ { gfrMax: 10, dose: '1-2mg/kg', frequency: 'co 72h + TDM' }, { gfrMax: 50, dose: '3-5mg/kg', frequency: 'co 36h + TDM' } ], 'LEWOFLOKSACYNA': [ { gfrMax: 50, dose: '500mg x1, potem 250mg', frequency: 'co 48h' } ], 'FLUKONAZOL': [ { gfrMax: 50, dose: 'nasyc. 400mg, potem 200mg', frequency: 'co 24h' } ], 'ENOKSAPARYNA': [ { gfrMax: 15, dose: 'Przeciwwskazana', frequency: ''}, { gfrMax: 30, dose: '20mg', frequency: 'co 24h' } ] };

// GLOBALNE ZMIENNE
let autosaveInterval = null;
let hasUnsavedChanges = false;
let fluidWarningShown = false;
let kcalWarningShown = false;

// Toast Notifications i Autosave bez zmian...
function showToast(title, message, type = 'info', duration = 4000) { const container = document.getElementById('toastContainer'); const toast = document.createElement('div'); toast.className = `toast ${type}`; const icons = { success: 'fa-check-circle', error: 'fa-exclamation-circle', warning: 'fa-exclamation-triangle', info: 'fa-info-circle' }; toast.innerHTML = ` <i class="fas ${icons[type]} toast-icon"></i> <div class="toast-content"> <div class="toast-title">${title}</div> <div class="toast-message">${message}</div> </div> <button class="toast-close" onclick="removeToast(this)">×</button> `; container.appendChild(toast); setTimeout(() => { if (toast.parentNode) { removeToast(toast.querySelector('.toast-close')); } }, duration); }
function removeToast(button) { const toast = button.parentElement; toast.style.animation = 'toastSlideIn 0.3s ease-out reverse'; setTimeout(() => { if (toast.parentNode) { toast.parentNode.removeChild(toast); } }, 300); }
function updateAutosaveIndicator(status, message) { const indicator = document.getElementById('autosaveIndicator'); indicator.className = `autosave-indicator ${status}`; indicator.querySelector('span').textContent = message; const icons = { saving: 'fa-circle', saved: 'fa-check-circle', error: 'fa-exclamation-circle' }; indicator.querySelector('i').className = `fas ${icons[status] || 'fa-circle'}`; }
function markAsChanged() { hasUnsavedChanges = true; updateAutosaveIndicator('saving', 'Niezapisane zmiany...'); }
function autoSave() { if (!hasUnsavedChanges) return; const patientName = document.getElementById('patientNameInput').value.trim(); if (!patientName) { updateAutosaveIndicator('error', 'Brak nazwy pacjenta'); return; } try { const cardState = getCardState(); const autoSaveKey = `autosave_${patientName.replace(/\s+/g, '-')}`; localStorage.setItem(autoSaveKey, JSON.stringify({ ...cardState, timestamp: new Date().toISOString(), isAutoSave: true })); hasUnsavedChanges = false; updateAutosaveIndicator('saved', 'Wszystkie zmiany zapisane'); } catch (e) { updateAutosaveIndicator('error', 'Błąd zapisu automatycznego'); console.error('Autosave error:', e); } }
function startAutosave() { if (autosaveInterval) clearInterval(autosaveInterval); autosaveInterval = setInterval(autoSave, 30000); }
function restoreFromAutosave() { const patientName = document.getElementById('patientNameInput').value.trim(); if (!patientName) return; const autoSaveKey = `autosave_${patientName.replace(/\s+/g, '-')}`; const savedData = localStorage.getItem(autoSaveKey); if (savedData) { try { const cardState = JSON.parse(savedData); if (cardState.isAutoSave) { const saveTime = new Date(cardState.timestamp).toLocaleString(); if (confirm(`Znaleziono automatyczny zapis dla tego pacjenta z ${saveTime}. Czy przywrócić dane?`)) { populateCardFromState(cardState); showToast('Przywrócono', 'Dane zostały przywrócone z automatycznego zapisu', 'success'); } } } catch (e) { console.error('Error restoring autosave:', e); } } }

// --- ZAKTUALIZOWANA FUNKCJA PODSUMOWAŃ ---
function updateSummaries() {
    let totalFluids = 0;
    let totalKcal = 0;
    const weight = parseFloat(document.getElementById('patientWeight').value) || 0;

    document.querySelectorAll('#fluidsTbody tr').forEach(row => {
        const rateInput = row.querySelector('.fluid-rate');
        if (rateInput && rateInput.value) {
            const rate = parseFloat(rateInput.value.replace(',', '.'));
            if (!isNaN(rate)) {
                totalFluids += rate * 24;
            }
        }
        const nameInput = row.querySelector('.fluid-name');
        if (nameInput && glucoseKcalData[nameInput.value]) {
            const rate = parseFloat(rateInput.value.replace(',', '.'));
            if (!isNaN(rate)) {
                totalKcal += (rate * 24) * glucoseKcalData[nameInput.value];
            }
        }
    });

    document.querySelectorAll('#nutritionTbody tr').forEach(row => {
        const prepInput = row.querySelector('.nutrition-prep');
        const rateInput = row.querySelector('.nutrition-rate');
        if (prepInput && prepInput.value && rateInput && rateInput.value) {
            const rate = parseFloat(rateInput.value.replace(',', '.'));
            const productInfo = nutritionData[prepInput.value];
            if (productInfo && !isNaN(rate) && rate > 0) {
                totalFluids += rate * 24;
                totalKcal += (productInfo.kcal / productInfo.volume) * (rate * 24);
            }
        } else if (prepInput && prepInput.value) {
            const productInfo = nutritionData[prepInput.value];
            if (productInfo) {
                totalFluids += productInfo.volume;
                totalKcal += productInfo.kcal;
            }
        }
    });

    document.getElementById('totalFluids').textContent = totalFluids.toFixed(0);
    document.getElementById('totalKcal').textContent = totalKcal.toFixed(0);
    
    const kcalPerKg = weight > 0 ? (totalKcal / weight) : 0;
    document.getElementById('kcalPerKg').textContent = `${kcalPerKg.toFixed(1)} kcal/kg`;

    // Update fluid balance bar
    const fluidBar = document.getElementById('fluidBalanceBar');
    const fluidPercentage = Math.min((totalFluids / 4000) * 100, 100); // Max 4000ml
    fluidBar.style.width = `${fluidPercentage}%`;
    if (totalFluids > 3000) {
        fluidBar.style.backgroundColor = 'var(--danger)';
        if (!fluidWarningShown) {
            showToast('Nadmierna płynoterapia', `Suma płynów (${totalFluids.toFixed(0)} ml) przekroczyła 3000 ml.`, 'warning');
            fluidWarningShown = true;
        }
    } else if (totalFluids > 2000) {
        fluidBar.style.backgroundColor = 'var(--warning)';
        fluidWarningShown = false;
    } else {
        fluidBar.style.backgroundColor = 'var(--info)';
        fluidWarningShown = false;
    }

    // Kcal warning
    if (kcalPerKg > 35) {
        if (!kcalWarningShown) {
            showToast('Wysoka podaż kalorii', `Suma kcal/kg (${kcalPerKg.toFixed(1)}) przekroczyła 35 kcal/kg.`, 'warning');
            kcalWarningShown = true;
        }
    } else {
        kcalWarningShown = false;
    }
}

// Pozostałe główne funkcje bez zmian...
function removeRow(button) { button.closest('tr').remove(); updateSummaries(); markAsChanged(); }
function calculateInfusionRate(inputElement) { const row = inputElement.closest('tr'); if (!row) return; const weightInput = document.getElementById('patientWeight'); const weight = parseFloat(weightInput.value); const doseInput = row.querySelector('.dose'); const concentrationInput = row.querySelector('input[id$="_conc"]'); const rateOutput = row.querySelector('.infusion-rate'); if (!weight || weight <= 0 || !doseInput.value || !concentrationInput.value) { return; } let doseStr = doseInput.value.replace(',', '.'); let concStr = concentrationInput.value.replace(',', '.'); const doseRegex = /([\d\.]+)(?:\s*-\s*([\d\.]+))?.*?(μg|mcg|mg|j)\s*(\/kg)?\s*\/(min|h)/; const doseMatch = doseStr.match(doseRegex); if (!doseMatch) { rateOutput.value = ''; return; } let doseValue1 = parseFloat(doseMatch[1]); let doseValue2 = doseMatch[2] ? parseFloat(doseMatch[2]) : null; let doseUnit = doseMatch[3]; const perKg = doseMatch[4]; const perTime = doseMatch[5]; const concRegex = /([\d\.]+)\s*(mg|μg|mcg|j)\s*\/(?:([\d\.]+)\s*)?ml/; const concMatch = concStr.match(concRegex); let concentrationPerMl; if (concMatch) { let totalMass = parseFloat(concMatch[1]); const massUnit = concMatch[2]; const totalVolume = concMatch[3] ? parseFloat(concMatch[3]) : 1; if (massUnit === 'mg') totalMass *= 1000; concentrationPerMl = totalMass / totalVolume; } else { rateOutput.value = ''; return; } if (concentrationPerMl === 0) return; if (doseUnit === 'mg') { doseValue1 *= 1000; if(doseValue2) doseValue2 *= 1000; } const calculateRate = (dose) => { let totalDosePerTime = dose; if (perKg) totalDosePerTime *= weight; const volumePerTime = totalDosePerTime / concentrationPerMl; return (perTime === 'min') ? volumePerTime * 60 : volumePerTime; }; const finalRate1 = calculateRate(doseValue1); if (doseValue2) { const finalRate2 = calculateRate(doseValue2); rateOutput.value = `${finalRate1.toFixed(1).replace('.', ',')} - ${finalRate2.toFixed(1).replace('.', ',')}`; } else { rateOutput.value = finalRate1.toFixed(1).replace('.', ','); } }
function calculateIcuDay() { const admissionDateStr = document.getElementById('admissionDateInput').value; const mainDateStr = document.getElementById('mainDateInput').value; const icuDayInput = document.getElementById('icuDayInput'); const parseDate = (dateStr) => { const parts = dateStr.match(/^(\d{1,2})\.(\d{1,2})\.(\d{4})$/); if (!parts) return null; return new Date(parts[3], parts[2] - 1, parts[1]); }; const admissionDate = parseDate(admissionDateStr); const mainDate = parseDate(mainDateStr); if (admissionDate && mainDate && mainDate >= admissionDate) { const utcMain = Date.UTC(mainDate.getFullYear(), mainDate.getMonth(), mainDate.getDate()); const utcAdmission = Date.UTC(admissionDate.getFullYear(), admissionDate.getMonth(), admissionDate.getDate()); const dayInMillis = 1000 * 60 * 60 * 24; const diffDays = (utcMain - utcAdmission) / dayInMillis; icuDayInput.value = Math.round(diffDays) + 1; } else { icuDayInput.value = ''; } }
function calculateBMI() { const weightInput = document.getElementById('patientWeight'); const heightInput = document.getElementById('heightInput'); const bmiOutput = document.getElementById('bmiOutput'); const weight = parseFloat(weightInput.value); const height = parseFloat(heightInput.value); if (weight > 0 && height > 0) { const heightInMeters = height / 100; const bmi = weight / (heightInMeters * heightInMeters); bmiOutput.value = bmi.toFixed(1); } else { bmiOutput.value = ''; } }
function handleWeightHeightChange() { calculateBMI(); document.querySelectorAll('#continuousDrugsTbody tr').forEach(row => { const doseInput = row.querySelector('.dose'); if (doseInput) calculateInfusionRate(doseInput); }); recalculateAllKgDoses(); updateSummaries(); }
function addContinuousDrug() { const tbody = document.getElementById('continuousDrugsTbody'); const newRow = document.createElement('tr'); const rowId = 'cont_' + Date.now(); newRow.innerHTML = `<td><input type="text" class="drug-input drug-name" placeholder="Nazwa leku" list="continuousDrugsList" autocomplete="off" onchange="fillContinuousDrugData(this, '${rowId}')" id="${rowId}_name" /><input type="text" class="drug-input" placeholder="Stężenie" autocomplete="off" id="${rowId}_conc" oninput="calculateInfusionRate(this.closest('tr').querySelector('.dose'))" /></td><td><input type="text" class="drug-input dose" placeholder="Dawka" autocomplete="off" id="${rowId}_dose" oninput="calculateInfusionRate(this)" /></td><td><input type="text" class="drug-input infusion-rate" placeholder="0,0" autocomplete="off" /></td><td><div class="signature-box-cell"></div></td><td class="action-column no-print"><button onclick="removeRow(this)" class="remove-button"><i class="fas fa-times-circle"></i></button></td>`; tbody.appendChild(newRow); }
function fillContinuousDrugData(input, rowId) { const drugName = input.value.toUpperCase(); if (continuousDrugsData[drugName]) { const data = continuousDrugsData[drugName]; const concInput = document.getElementById(rowId + '_conc'); const doseInput = document.getElementById(rowId + '_dose'); const row = input.closest('tr'); const rateOutput = row.querySelector('.infusion-rate'); concInput.value = data.concentration; doseInput.value = data.dose; if (data.fixedRate) { rateOutput.value = data.fixedRate; } else { calculateInfusionRate(doseInput); } } }
function addPeriodicDrug() { const tbody = document.getElementById('periodicDrugsTbody'); const newRow = document.createElement('tr'); const rowId = 'per_' + Date.now(); newRow.innerHTML = `<td><input type="text" class="drug-input drug-name" placeholder="Nazwa leku" list="periodicDrugsList" autocomplete="off" onchange="fillPeriodicDrugData(this)" id="${rowId}_name" /><input type="text" class="drug-input" placeholder="Dawka" autocomplete="off" id="${rowId}_dose" /></td><td><input type="text" class="drug-input" placeholder="i.v." autocomplete="off" id="${rowId}_route" /><input type="text" class="drug-input" placeholder="co 24h" autocomplete="off" id="${rowId}_freq" /><span class="dose-reduction-notice" style="display:none;">⚠️ Zredukowano</span></td><td><div class="signature-box-cell"></div></td><td class="action-column no-print"><button onclick="removeRow(this)" class="remove-button"><i class="fas fa-times-circle"></i></button></td>`; tbody.appendChild(newRow); }
function fillPeriodicDrugData(input) { const row = input.closest('tr'); const drugName = input.value.toUpperCase(); const doseInput = row.querySelector('input[id$="_dose"]'); const routeInput = row.querySelector('input[id$="_route"]'); const freqInput = row.querySelector('input[id$="_freq"]'); const originalData = periodicDrugsData[drugName]; if (originalData) { doseInput.dataset.originalDose = originalData.dose; routeInput.value = originalData.route; routeInput.placeholder = ''; freqInput.value = originalData.frequency; freqInput.placeholder = ''; } else { doseInput.dataset.originalDose = ''; routeInput.placeholder = 'i.v.'; freqInput.placeholder = 'co 24h'; } recalculateDose(row); adjustSingleDoseForGfr(row); }
function addFluid() { const tbody = document.getElementById('fluidsTbody'); const newRow = document.createElement('tr'); const rowId = 'fluid_' + Date.now(); newRow.innerHTML = `<td><input type="text" class="drug-input fluid-name" placeholder="Płyn" list="fluidsList" autocomplete="off" onchange="fillFluidData(this, '${rowId}')" /></td><td><input type="text" class="drug-input additives-input" placeholder="np. + KCl 15% 10ml | + MgSO4 20% 5ml" autocomplete="off" /></td><td><input type="number" class="drug-input" placeholder="ml" autocomplete="off" id="${rowId}_vol" oninput="updateSummaries()" /></td><td><input type="number" class="drug-input fluid-rate" placeholder="ml/h" autocomplete="off" id="${rowId}_rate" oninput="updateSummaries()" /></td><td><div class="signature-box-cell"></div></td><td class="action-column no-print"><button onclick="removeRow(this)" class="remove-button"><i class="fas fa-times-circle"></i></button></td>`; tbody.appendChild(newRow); }
function fillFluidData(input, rowId) { const fluidName = input.value; if (fluidsData[fluidName]) { document.getElementById(rowId + '_vol').value = fluidsData[fluidName].volume.replace('ml',''); document.getElementById(rowId + '_rate').value = fluidsData[fluidName].rate; updateSummaries(); } }
function addNutrition() { const tbody = document.getElementById('nutritionTbody'); const newRow = document.createElement('tr'); const rowId = 'nutr_' + Date.now(); newRow.innerHTML = `<td><input type="text" class="drug-input nutrition-type" placeholder="Wybierz typ..." list="nutritionTypesList" autocomplete="off" onchange="updateNutritionProductList(this)" /></td><td><input type="text" class="drug-input nutrition-prep" placeholder="Wybierz preparat..." list="enteralProductsList" autocomplete="off" onchange="fillNutritionData(this, '${rowId}')" id="${rowId}_prep"/><textarea class="drug-input nutrition-additives" placeholder="" id="${rowId}_additives" autocomplete="off" style="display:none;" rows="1"></textarea></td><td><input type="number" class="drug-input nutrition-rate" placeholder="ml/h" autocomplete="off" id="${rowId}_rate" oninput="updateSummaries()" /></td><td><div class="signature-box-cell"></div></td><td class="action-column no-print"><button onclick="removeRow(this)" class="remove-button"><i class="fas fa-times-circle"></i></button></td>`; tbody.appendChild(newRow); const newTextarea = newRow.querySelector('.nutrition-additives'); newTextarea.addEventListener('input', () => autoResizeTextarea(newTextarea)); }
function fillNutritionData(input, rowId) { const prepName = input.value; const rateInput = document.getElementById(rowId + '_rate'); const additivesTextarea = document.getElementById(rowId + '_additives'); const row = input.closest('tr'); const typeInput = row.querySelector('.nutrition-type'); const typeValue = typeInput ? typeInput.value.toLowerCase() : ''; if (nutritionFlowRates[prepName] && !rateInput.value) { rateInput.value = nutritionFlowRates[prepName]; } if (typeValue.includes('pozajelitowe') && additivesTextarea) { if (prepName.includes('SmofKabiven') || prepName.includes('OMEGAFLEX') || prepName.includes('Nutriflex') || prepName.includes('Aminomix')) { if (!additivesTextarea.value) { additivesTextarea.value = '+ Glycophos 3ml + Supliven 10ml + Omegaven 50ml + Soluvit N 1amp + Vitalipid 10ml'; autoResizeTextarea(additivesTextarea); } } } updateSummaries(); }
function updateNutritionProductList(typeInput) { const row = typeInput.closest('tr'); const prepInput = row.querySelector('.nutrition-prep'); const additivesInput = row.querySelector('.nutrition-additives'); const typeValue = typeInput.value.toLowerCase(); let newListId = 'enteralProductsList'; if (typeValue.includes('dojelitowe')) { newListId = 'enteralProductsList'; if (additivesInput) { additivesInput.style.display = 'none'; additivesInput.value = ''; } } else if (typeValue.includes('pozajelitowe')) { newListId = 'parenteralProductsList'; if (additivesInput) { additivesInput.style.display = 'block'; additivesInput.placeholder = 'np. + Glycophos 3ml + Supliven 10ml...'; } } else { if (additivesInput) { additivesInput.style.display = 'none'; additivesInput.value = ''; } } prepInput.setAttribute('list', newListId); prepInput.value = ''; updateSummaries(); }
function addProcedure() { const tbody = document.getElementById('proceduresTbody'); const newRow = document.createElement('tr'); newRow.innerHTML = `<td><input type="text" class="drug-input" placeholder="Godz." list="timesList" autocomplete="off" /></td><td><input type="text" class="drug-input" placeholder="Nazwa procedury/zabiegu" list="proceduresList" autocomplete="off" /></td><td><div class="signature-box-cell"></div></td><td class="action-column no-print"><button onclick="removeRow(this)" class="remove-button"><i class="fas fa-times-circle"></i></button></td>`; tbody.appendChild(newRow); }
function recalculateDose(row) { const doseInput = row.querySelector('input[id$="_dose"]'); const originalDose = doseInput.dataset.originalDose; const weight = parseFloat(document.getElementById('patientWeight').value); if (originalDose && originalDose.includes('/kg') && weight > 0) { const doseRegex = /([\d\.]+)(?:\s*-\s*([\d\.]+))?/; const matches = originalDose.match(doseRegex); if (matches) { const dose1 = parseFloat(matches[1]); const totalDose1 = Math.round(dose1 * weight); if (matches[2]) { const dose2 = parseFloat(matches[2]); const totalDose2 = Math.round(dose2 * weight); doseInput.value = `${totalDose1}-${totalDose2}mg (${originalDose})`; } else { doseInput.value = `${totalDose1}mg (${originalDose})`; } } } else if (originalDose) { doseInput.value = originalDose; } }
function recalculateAllKgDoses(){ document.querySelectorAll('#periodicDrugsTbody tr').forEach(row => recalculateDose(row)); adjustAllDosesForGfr(); }
function adjustAllDosesForGfr() { document.querySelectorAll('#periodicDrugsTbody tr').forEach(row => adjustSingleDoseForGfr(row)); }
function adjustSingleDoseForGfr(row) { const gfrInput = document.getElementById('gfrInput'); const gfr = gfrInput.value ? parseFloat(gfrInput.value) : null; const drugNameInput = row.querySelector('.drug-name'); if (!drugNameInput || !drugNameInput.value) return; const drugName = drugNameInput.value.toUpperCase(); const doseInput = row.querySelector('input[id$="_dose"]'); const freqInput = row.querySelector('input[id$="_freq"]'); const notice = row.querySelector('.dose-reduction-notice'); const adjustmentRules = gfrDoseAdjustments[drugName]; recalculateDose(row); row.classList.remove('gfr-dose-adjusted'); if (notice) notice.style.display = 'none'; if (!gfr || !adjustmentRules) return; let appliedRule = null; for (const rule of adjustmentRules) { if (gfr <= rule.gfrMax) { appliedRule = rule; break; } } if (appliedRule) { if (appliedRule.dose.includes('/kg')) { const weight = parseFloat(document.getElementById('patientWeight').value); if (weight > 0) { const doseRegex = /([\d\.]+)/; const matches = appliedRule.dose.match(doseRegex); if(matches) { const totalDose = Math.round(parseFloat(matches[1]) * weight); doseInput.value = `${totalDose}mg (${appliedRule.dose})`; } } else { doseInput.value = appliedRule.dose; } } else { doseInput.value = appliedRule.dose; } if (appliedRule.frequency && freqInput) freqInput.value = appliedRule.frequency; row.classList.add('gfr-dose-adjusted'); if (notice) notice.style.display = 'inline'; if (!row.dataset.gfrWarningShown) { showToast('Dostosowano dawkę', `Dawka ${drugName} została dostosowana do GFR=${gfr}`, 'warning', 6000); row.dataset.gfrWarningShown = 'true'; } } }
function populateDatalists() { const createOptions = (dataObject) => Object.keys(dataObject).map(key => `<option value="${key}"></option>`).join(''); document.getElementById('continuousDrugsList').innerHTML = createOptions(continuousDrugsData); document.getElementById('periodicDrugsList').innerHTML = createOptions(periodicDrugsData); document.getElementById('fluidsList').innerHTML = createOptions(fluidsData); const enteral = {}; const parenteral = {}; Object.keys(nutritionData).forEach(key => { if (key.includes('OMEGAFLEX') || key.includes('Nutriflex') || key.includes('SmofKabiven') || key.includes('Aminomix')) { parenteral[key] = nutritionData[key]; } else { enteral[key] = nutritionData[key]; } }); document.getElementById('enteralProductsList').innerHTML = createOptions(enteral); document.getElementById('parenteralProductsList').innerHTML = createOptions(parenteral); }
function initializeCard() { const today = new Date(); const day = String(today.getDate()).padStart(2, '0'); const month = String(today.getMonth() + 1).padStart(2, '0'); const year = today.getFullYear(); document.getElementById('mainDateInput').value = `${day}.${month}.${year}`; calculateIcuDay(); calculateBMI(); updateAutosaveIndicator('saved', 'Wszystkie zmiany zapisane'); updateSummaries(); }

// --- NOWA FUNKCJA DRAG & DROP ---
function initializeDragAndDrop() {
    const tableBodies = document.querySelectorAll('tbody');
    tableBodies.forEach(tbody => {
        new Sortable(tbody, {
            animation: 150,
            ghostClass: 'sortable-ghost',
            chosenClass: 'sortable-chosen',
            onEnd: () => {
                markAsChanged(); // Zaznacz zmiany po zmianie kolejności
            }
        });
    });
}

// Zaktualizowany MAIN INITIALIZATION
document.addEventListener('DOMContentLoaded', () => {
    populateDatalists();
    initializeDragAndDrop(); // Inicjalizacja D&D
    startAutosave();

    // Reszta bez zmian (dark mode, listeners, etc.)
    const toggle = document.getElementById('darkModeToggle'); const html = document.documentElement; const icon = toggle.querySelector('i'); if (localStorage.getItem('darkMode') === 'enabled') { html.classList.add('dark-mode'); icon.className = 'fas fa-sun'; } toggle.addEventListener('click', () => { html.classList.toggle('dark-mode'); if (html.classList.contains('dark-mode')) { localStorage.setItem('darkMode', 'enabled'); icon.className = 'fas fa-sun'; showToast('Tryb ciemny', 'Włączono tryb ciemny', 'info'); } else { localStorage.setItem('darkMode', 'disabled'); icon.className = 'fas fa-moon'; showToast('Tryb jasny', 'Włączono tryb jasny', 'info'); } });
    const roomInput = document.getElementById('roomInput'); const roomInputPrint = document.getElementById('roomInputPrint'); if (roomInput && roomInputPrint) { roomInput.addEventListener('input', function() { roomInputPrint.value = this.value; markAsChanged(); }); }
    document.addEventListener('input', function(e) { if (e.target.matches('input, textarea, select')) { markAsChanged(); } });
    document.getElementById('patientNameInput').addEventListener('blur', function() { if (this.value.trim()) { setTimeout(() => restoreFromAutosave(), 500); } });
    
    initializeCard();
    
    setTimeout(() => { showToast('System gotowy', 'Karta Zleceń OIT v2.2 - wszystkie funkcje aktywne', 'success'); }, 1000);
    console.log('🏥 Medical Card System v2.2 - Drag&Drop, Summaries & Offline Ready!');
});

// --- OBSŁUGA TRYBU OFFLINE ---
window.addEventListener('online', () => {
    showToast('Połączenie przywrócone', 'Jesteś z powrotem online.', 'success');
});
window.addEventListener('offline', () => {
    showToast('Brak połączenia z internetem', 'Aplikacja działa w trybie offline.', 'warning');
});
